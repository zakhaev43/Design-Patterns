package Decorator_Pattern

import "fmt"

type Printer interface {
    Print() string
}

type SimplePrinter struct {}

func (sp *SimplePrinter) Print() string {
    return "Hello, world!"
}

func BoldDecorator(p Printer) Printer {
    return PrinterFunc(func() string {
        return "<b>" + p.Print() + "</b>"
    })
}

type PrinterFunc func() string

func (pf PrinterFunc) Print() string {
    return pf()
}

func main() {
    simplePrinter := &SimplePrinter{}
    boldPrinter := BoldDecorator(simplePrinter)
    fmt.Println(simplePrinter.Print()) // Output: Hello, world!
    fmt.Println(boldPrinter.Print()) // Output: <b>Hello, world!</b>
}